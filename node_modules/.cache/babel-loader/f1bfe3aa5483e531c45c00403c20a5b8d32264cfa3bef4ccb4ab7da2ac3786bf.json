{"ast":null,"code":"var _jsxFileName = \"/Users/Aviv/Desktop/fed_final_project/src/App.js\",\n  _s = $RefreshSig$();\n/*\nProject name: \"Spent It Right\".\nProject team: Karin Ochayon - 207797002, Dor Uzan - 205890510.\n*/\n\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport AddCostItem from \"./NewExpenses\";\nimport Report from \"./Report\";\nimport localstorage from \"./localstorage\";\nimport moment from \"moment\";\n\n/*\nThis file contains the logic from the two components - \"AddCostItem\", \"Report\" and from the util file \"localStorage\".\nThere is a connection between adding an item and displaying it in the table - when a user adds an item, the item is\ndisplayed directly in the table (a better and clearer user experience).\nTherefore, we needed a \"parent\" to link the two children - so the logic is presented in this file.\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentDate = new Date();\nfunction App() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [costs, setCosts] = useState([]);\n  const [reportDate, setReportDate] = useState({\n    year: currentDate.getFullYear(),\n    month: currentDate.getMonth()\n  });\n  const [cost, setCost] = useState({\n    amount: 0,\n    price: 0,\n    category: '',\n    item_name: '',\n    description: '',\n    purchaseDate: new Date()\n  });\n  useEffect(() => {\n    handleGenerateReport();\n  }, [reportDate]);\n  const handleReportDateChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setReportDate({\n      ...reportDate,\n      [name]: value\n    });\n  };\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setCost({\n      ...cost,\n      [name]: value\n    });\n  };\n  const handleGenerateReport = async () => {\n    try {\n      let costsForMonthAndYear = [];\n      if (reportDate.month === '12') {\n        /*If the user wants a financial expense report for the entire year, and not just for a specific month*/\n        costsForMonthAndYear = await localstorage.getCostsByYear(reportDate.year);\n      } else {\n        /*If the user wants a financial expense report for a specific month & year*/\n        costsForMonthAndYear = await localstorage.getCostsByMonthAndYear(reportDate.month, reportDate.year);\n      }\n      setCosts(costsForMonthAndYear);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    /*If the user filled in all the fields correctly - enter the information to the localStorage, expenses table and inform the user\n     that the item was successfully added. Else, let the user know he didn't fill all the fields/an error occurred while adding the item*/\n    if (cost.price && cost.category && cost.description && cost.purchaseDate && cost.amount) {\n      try {\n        await localstorage.addCost({\n          ...cost,\n          purchaseDate: moment(cost.purchaseDate).format('YYYY-MM-DD')\n        });\n        setMessage('Item added successfully!');\n      } catch (error) {\n        setMessage('An error occurred while adding the item');\n      }\n    } else {\n      setMessage('Please fill all the details before adding an item');\n    }\n    const date = new Date(cost.purchaseDate);\n    setReportDate({\n      year: date.getFullYear(),\n      month: date.getMonth()\n    });\n\n    /*\n    After the item has been successfully added, the animation will be performed and after 5 seconds -\n    all the fields will be reset and the animation will stop.\n    */\n\n    // setTimeout(() => {\n    //   const fallingCoinsElement = document.getElementById('gimmick');\n    //   fallingCoinsElement.parentNode.removeChild(fallingCoinsElement);\n\n    //   setMessage('');\n    //   setCost({\n    //     item_name: '',\n    //     price: 0,\n    //     amount: 0,\n    //     category: '',\n    //     description: '',\n    //     purchaseDate: new Date(),\n    //   });\n    // }, 5000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(AddCostItem, {\n        cost: cost,\n        message: message,\n        handleSubmit: handleSubmit,\n        handleInputChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"separator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Report, {\n        costs: costs,\n        reportDate: reportDate,\n        handleReportDateChange: handleReportDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"V99Iflsoy12GoTFZfpE7FZ0X0+8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AddCostItem","Report","localstorage","moment","currentDate","Date","App","message","setMessage","costs","setCosts","reportDate","setReportDate","year","getFullYear","month","getMonth","cost","setCost","amount","price","category","item_name","description","purchaseDate","handleGenerateReport","handleReportDateChange","event","name","value","target","handleInputChange","costsForMonthAndYear","getCostsByYear","getCostsByMonthAndYear","error","console","log","handleSubmit","preventDefault","addCost","format","date"],"sources":["/Users/Aviv/Desktop/fed_final_project/src/App.js"],"sourcesContent":["/*\nProject name: \"Spent It Right\".\nProject team: Karin Ochayon - 207797002, Dor Uzan - 205890510.\n*/\n\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport AddCostItem from \"./NewExpenses\";\nimport Report from \"./Report\";\nimport localstorage from \"./localstorage\";\nimport moment from \"moment\";\n\n/*\nThis file contains the logic from the two components - \"AddCostItem\", \"Report\" and from the util file \"localStorage\".\nThere is a connection between adding an item and displaying it in the table - when a user adds an item, the item is\ndisplayed directly in the table (a better and clearer user experience).\nTherefore, we needed a \"parent\" to link the two children - so the logic is presented in this file.\n*/\n\nconst currentDate = new Date();\n\nfunction App() {\n  const [message, setMessage] = useState('');\n  const [costs, setCosts] = useState([]);\n  const [reportDate, setReportDate] = useState({\n    year: currentDate.getFullYear(),\n    month: currentDate.getMonth(),\n  });\n  const [cost, setCost] = useState({\n    amount: 0,\n    price: 0,\n    category: '',\n    item_name: '',\n    description: '',\n    purchaseDate: new Date(),\n  });\n\n  useEffect(() => {\n    handleGenerateReport();\n  }, [reportDate]);\n\n  const handleReportDateChange = (event) => {\n    const { name, value } = event.target;\n    setReportDate({ ...reportDate, [name]: value });\n  };\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setCost({ ...cost, [name]: value });\n  };\n\n  const handleGenerateReport = async () => {\n    try {\n      let costsForMonthAndYear = [];\n      if (reportDate.month === '12') {\n        /*If the user wants a financial expense report for the entire year, and not just for a specific month*/\n        costsForMonthAndYear = await localstorage.getCostsByYear(\n          reportDate.year\n        );\n      } else {\n        /*If the user wants a financial expense report for a specific month & year*/\n        costsForMonthAndYear = await localstorage.getCostsByMonthAndYear(\n          reportDate.month,\n          reportDate.year\n        );\n      }\n\n      setCosts(costsForMonthAndYear);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    /*If the user filled in all the fields correctly - enter the information to the localStorage, expenses table and inform the user\n     that the item was successfully added. Else, let the user know he didn't fill all the fields/an error occurred while adding the item*/\n    if (\n      cost.price &&\n      cost.category &&\n      cost.description &&\n      cost.purchaseDate &&\n      cost.amount\n    ) {\n      try {\n        await localstorage.addCost({\n          ...cost,\n          purchaseDate: moment(cost.purchaseDate).format('YYYY-MM-DD'),\n        });\n\n        setMessage('Item added successfully!');\n      } catch (error) {\n        setMessage('An error occurred while adding the item');\n      }\n    } else {\n      setMessage('Please fill all the details before adding an item');\n    }\n\n    const date = new Date(cost.purchaseDate);\n\n    setReportDate({\n      year: date.getFullYear(),\n      month: date.getMonth(),\n    });\n\n    /*\n    After the item has been successfully added, the animation will be performed and after 5 seconds -\n    all the fields will be reset and the animation will stop.\n    */\n\n    // setTimeout(() => {\n    //   const fallingCoinsElement = document.getElementById('gimmick');\n    //   fallingCoinsElement.parentNode.removeChild(fallingCoinsElement);\n\n    //   setMessage('');\n    //   setCost({\n    //     item_name: '',\n    //     price: 0,\n    //     amount: 0,\n    //     category: '',\n    //     description: '',\n    //     purchaseDate: new Date(),\n    //   });\n    // }, 5000);\n  };\n\n  return (\n    <div className='app'>\n     \n      <main>\n        <AddCostItem\n          cost={cost}\n          message={message}\n          handleSubmit={handleSubmit}\n          handleInputChange={handleInputChange}\n        />\n        <div className='separator' />\n        <Report\n          costs={costs}\n          reportDate={reportDate}\n          handleReportDateChange={handleReportDateChange}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}