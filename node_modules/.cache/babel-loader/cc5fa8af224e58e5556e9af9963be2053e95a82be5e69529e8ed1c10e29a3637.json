{"ast":null,"code":"var _jsxFileName = \"/Users/Aviv/Desktop/fed_final_project/src/App.js\",\n  _s = $RefreshSig$();\nimport './Report.css';\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport NewExpense from \"./NewExpenses\";\nimport Report from \"./Report\";\nimport localstorage from \"./localstorage\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentDate = new Date();\n\n//This is the main component that returns the HTML for the cost manager application.\nfunction App() {\n  _s();\n  // The useState hook is used to initialize the state variable and the functions it is used to update its value.\n  // This is a state variable that holds an array of each variable ( costs, message,reportDate) . \n\n  const [costs, setCosts] = useState([]);\n  const [message, setMessage] = useState('');\n  const [reportDate, setReportDate] = useState({\n    year: currentDate.getFullYear(),\n    month: currentDate.getMonth()\n  });\n  const [cost, setCost] = useState({\n    amount: 0,\n    price: 0,\n    category: '',\n    item_name: '',\n    purchaseDate: new Date()\n  });\n\n  // This is the useEffect hook, which is called when the component is mounted.\n  // It calls the reportHandler function, which updates the costs state with the costs for the selected date.\n\n  useEffect(() => {\n    reportHandler();\n  }, [reportDate]);\n  const reportDateHandler = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setReportDate({\n      ...reportDate,\n      [name]: value\n    });\n  };\n  const inputHandler = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setCost({\n      ...cost,\n      [name]: value\n    });\n  };\n  const reportHandler = async () => {\n    try {\n      // expense report for the entire year\n      let costsForDate = [];\n      if (reportDate.month === '12') {\n        costsForDate = await localstorage.getReportByYear(reportDate.year);\n      } else {\n        // expense report for a specific month\n        costsForDate = await localstorage.getReportByDate(reportDate.month, reportDate.year);\n      }\n      setCosts(costsForDate);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleDeleteClick = async id => {\n    await deleteExpense(id);\n    const updatedExpenses = costs.filter(cost => cost.id !== id);\n    setExpenses(updatedExpenses);\n  };\n  const submitHandler = async event => {\n    event.preventDefault();\n    setTimeout(() => {\n      setMessage('');\n      setCost({\n        item_name: '',\n        price: 0,\n        amount: 0,\n        category: '',\n        purchaseDate: new Date()\n      });\n    }, 3000);\n    if (cost.price && cost.category && cost.purchaseDate && cost.amount) {\n      try {\n        await localstorage.addCost({\n          ...cost,\n          purchaseDate: moment(cost.purchaseDate).format('YYYY-MM-DD')\n        });\n        setMessage('Item added successfully!');\n      } catch (error) {\n        setMessage('An error occurred while adding the item');\n      }\n    } else {\n      setMessage('Please fill all the details before adding an item');\n    }\n    const date = new Date(cost.purchaseDate);\n    setReportDate({\n      year: date.getFullYear(),\n      month: date.getMonth()\n    });\n  };\n  //This returns the HTML for the application.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"h1\",\n      children: \"React Final Project Cost Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(NewExpense, {\n        cost: cost,\n        message: message,\n        submitHandler: submitHandler,\n        inputHandler: inputHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Report, {\n        costs: costs,\n        reportDate: reportDate,\n        reportDateHandler: reportDateHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"By aviv and raz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"r/Xo109g9jwCddobGng/m6YXzYM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","NewExpense","Report","localstorage","moment","currentDate","Date","App","costs","setCosts","message","setMessage","reportDate","setReportDate","year","getFullYear","month","getMonth","cost","setCost","amount","price","category","item_name","purchaseDate","reportHandler","reportDateHandler","event","name","value","target","inputHandler","costsForDate","getReportByYear","getReportByDate","error","console","log","handleDeleteClick","id","deleteExpense","updatedExpenses","filter","setExpenses","submitHandler","preventDefault","setTimeout","addCost","format","date"],"sources":["/Users/Aviv/Desktop/fed_final_project/src/App.js"],"sourcesContent":["\nimport './Report.css';\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport NewExpense from \"./NewExpenses\";\nimport Report from \"./Report\";\nimport localstorage from \"./localstorage\";\nimport moment from \"moment\";\nconst currentDate = new Date();\n\n\n\n//This is the main component that returns the HTML for the cost manager application.\nfunction App() {\n\n// The useState hook is used to initialize the state variable and the functions it is used to update its value.\n// This is a state variable that holds an array of each variable ( costs, message,reportDate) . \n \n  const [costs, setCosts] = useState([]);\n  const [message, setMessage] = useState('');\n  const [reportDate, setReportDate] = useState({\n    year: currentDate.getFullYear(),\n    month: currentDate.getMonth(),\n  });\n  const [cost, setCost] = useState({\n    amount: 0,\n    price: 0,\n    category: '',\n    item_name: '',\n   \n    purchaseDate: new Date(),\n  });\n\n  // This is the useEffect hook, which is called when the component is mounted.\n  // It calls the reportHandler function, which updates the costs state with the costs for the selected date.\n\n  useEffect(() => {\n    reportHandler();\n  }, [reportDate]);\n\n\n  const reportDateHandler = (event) => {\n    const { name, value } = event.target;\n    setReportDate({ ...reportDate, [name]: value });\n  };\n\n  const inputHandler = (event) => {\n    const { name, value } = event.target;\n    setCost({ ...cost, [name]: value });\n  };\n\n  const reportHandler = async () => {\n    try {\n      // expense report for the entire year\n      let costsForDate = [];\n      if (reportDate.month === '12') {\n        costsForDate = await localstorage.getReportByYear(\n          reportDate.year\n        );\n      \n      }\n     \n       else {\n        // expense report for a specific month\n        costsForDate = await localstorage.getReportByDate(\n          reportDate.month,\n          reportDate.year\n        );\n      }\n\n      setCosts(costsForDate);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleDeleteClick = async (id) => {\n    await deleteExpense(id);\n    const updatedExpenses = costs.filter((cost) => cost.id !== id);\n    setExpenses(updatedExpenses);\n};\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n       setTimeout(() => {\n      setMessage('');\n      setCost({\n        item_name: '',\n        price: 0,\n        amount: 0,\n        category: '',\n        purchaseDate: new Date(),\n      });\n    }, 3000);\n     \n    if (\n      cost.price &&\n      cost.category &&\n      cost.purchaseDate &&\n      cost.amount\n    ) {\n      try {\n        await localstorage.addCost({\n          ...cost,\n          purchaseDate: moment(cost.purchaseDate).format('YYYY-MM-DD'),\n        });\n\n        setMessage('Item added successfully!');\n      } catch (error) {\n        setMessage('An error occurred while adding the item');\n      }\n    } else {\n      setMessage('Please fill all the details before adding an item');\n    }\n\n    const date = new Date(cost.purchaseDate);\n\n    setReportDate({\n     \n      year: date.getFullYear(),\n      month: date.getMonth(),\n    });\n\n  };\n  //This returns the HTML for the application.\n\n  return (\n    <div className='app'>\n      <h1 className=\"h1\">React Final Project Cost Manager</h1>\n      <main>\n        <NewExpense\n          cost={cost}\n          message={message}\n          submitHandler={submitHandler}\n          inputHandler={inputHandler}\n        />\n        <div className='line' />\n        <Report\n          costs={costs}\n          reportDate={reportDate}\n          reportDateHandler={reportDateHandler}\n        />\n      </main>\n      <h2>By aviv and raz</h2>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}